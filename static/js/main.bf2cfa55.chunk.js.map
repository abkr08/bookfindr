{"version":3,"sources":["SVG.js","Book/Book.js","App.js","serviceWorker.js","index.js"],"names":["starIcon","_ref","color","react_default","a","createElement","xmlns","width","height","viewBox","fill","d","book","props","console","log","stars","ratings","i","push","SVG","key","className","href","link","target","rel","src","bookImage","alt","bookTitle","author","concat","App","state","loading","books","inputChangedHandler","e","value","_this","setState","fetch","then","res","json","data","items","map","obj","id","volumeInfo","infoLink","images","imageLinks","authors","title","averageRating","language","this","spinner","elements","length","Book_Book","thumbnail","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf2cfa55.chunk.js","sourcesContent":["import React from 'react';\nconst starIcon = ({color}) => \n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" \n        height=\"24\" viewBox=\"0 0 24 24\" fill={color}>\n        <path d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 \n            8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 \n            8.332-1.151z\"\n        />\n    </svg>\n    //{\n        //     style = {},\n        //     fill = '#fff',\n        //     width = '100%',\n        //     className = '',\n        //     height = '100%',\n        //     viewBox = '0 0 32 32',\n        //   } // <svg\n        //   width={width}\n        //   style={style}\n        //   height={height}\n        //   viewBox={viewBox}\n        //   className={className}\n        //   xmlns=\"http://www.w3.org/2000/svg\"\n        //   xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        // >\n        //     <path d=\"some path here\" fill={fill} />\n        // </svg>;\n        // \n    export default starIcon;","import React from 'react';\nimport './Book.css';\nimport StarIcon from '../SVG'; \n\nconst book = props => {\n    console.log(props);\n    let stars = [];\n    let ratings = props.ratings;\n    for(let i = 0; i < 5; i++){\n        stars.push(<StarIcon key={i} color={ratings > 0 ? 'gold' : 'grey'}/>);\n        ratings--;\n        }\n   \n    return (\n        <div className='Book'> \n            <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\"><img src={props.bookImage} alt='book'/></a>\n            <span>\n            <a href={props.link}><h4>{props.bookTitle}</h4></a>\n                <p>{props.author ? `By ${props.author}` : 'Unknown author'}</p>\n                <p>{stars}</p>\n            </span>\n        </div>\n    )\n}\n\nexport default book;","import React, { Component } from 'react';\nimport './App.css';\nimport Book from './Book/Book';\n\nclass App extends Component {\n  state = {\n    loading: false,\n    books: []\n  }\n  inputChangedHandler = e => {\n    const { value } = e.target;\n    this.setState({books: []});\n    if (value !== ''){\n      this.setState({loading: true});\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=${value}`)\n      .then(res => {\n        this.setState({loading: false})\n        res.json().then(data => {\n          console.log(data);\n          let books = data.items.map(book => {\n            let obj = {};\n            obj.id = book.id;\n            obj.link = book.volumeInfo.infoLink;\n            obj.images = book.volumeInfo.imageLinks;\n            obj.authors = book.volumeInfo.authors;\n            obj.title = book.volumeInfo.title;\n            obj.ratings = book.volumeInfo.averageRating;\n            obj.language = book.volumeInfo.language;\n            return obj;\n          })\n          this.setState({books});\n        });\n      });\n    } else {\n      //\n    }\n  }\n  render() {\n    console.log(this.state.books)\n    let spinner = null;\n    if (this.state.loading){\n      spinner = <div className=\"loading\"></div>;\n    }\n    let elements = null;\n    if (this.state.books.length > 0) {\n      elements = this.state.books.map(book => {\n        return <Book key={book.id} bookImage={book.images && book.images.thumbnail}\n                  bookTitle={book.title} ratings={book.ratings}\n                  link={book.link}\n                  author={book.authors} />\n      })\n    }\n    return (\n      <div className=\"App\">\n        <h1>BOOKFINDR</h1>\n        <form>\n          <input type='text' placeholder='Search book... ' onChange={this.inputChangedHandler}/>\n        </form>\n        {spinner}\n        <div className='Books'>\n        {elements}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}